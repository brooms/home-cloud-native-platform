---

# ensure Ansible dependencies are installed on the Ansible controller
- hosts: controller_instance

  vars:

    ansible_minimum_version: 2.8

    packages: [
      python-apt,
      python-pip,
      sshpass,
      unzip,
    ]

    python_modules: [
      { name: netaddr },
      { name: python-consul },
    ]

  pre_tasks:

    # Check Ansible version before proceeding
    - name: Assert Ansible version meets minimum requirements
      assert:
        that:
          - ansible_version.full is version_compare({{ ansible_minimum_version }}, '>=')
        fail_msg: "Ansible must be version {{ ansible_minimum_version }} or greater to run this play. Install Ansible using pip to ensure the latest version."
        success_msg: "Ansible version {{ ansible_version.full }} is installed"

  tasks:

    - name: Install dependencies
      import_role:
        name: configure-host
        tasks_from: install-dependencies
      tags:
        - base
        - dependencies

    - name: Configure host
      import_role:
        name: configure-host
        tasks_from: update-hosts-file.yml
      tags:
        - base
        - dependencies

# Ensure HCNP Compute Nodes are in the required state for installation of services
- hosts: compute_nodes
  
  vars:

    packages: [
      { name: python-apt },
      { name: python-pip },
      { name: sshpass },
    ]

    python_modules: [
      { name: docker },
      { name: python-consul },
    ]

    compute_node_public_ip: "\
      {% if ansible_system == 'FreeBSD' %}\
        {{ lookup('env','HCNP_NODE_EXTERNAL_IP') | default(hostvars[inventory_hostname]['ansible_'+ public_iface ]['ipv4'][0]['address'], true) }}\
      {% elif ansible_os_family == 'Windows'  %}\
        {{ lookup('env','HCNP_NODE_EXTERNAL_IP') | default(hostvars[inventory_hostname]['ansible_ip_addresses'][0], true) }}\
      {% else %}\
        {{ lookup('env','HCNP_NODE_EXTERNAL_IP') | default(hostvars[inventory_hostname]['ansible_'+ public_iface | replace('-', '_')]['ipv4']['address'], true) }}\
      {% endif %}"
    
    # resolv_nameservers: "{{ groups['rpi-hcnp_compute_nodes'].ansible_default_ipv4.address }}"
    resolv_nameservers: "{{ groups['compute_nodes'] | map('extract', hostvars, ['ansible_default', 'ipv4', 'address']) | join(',') }}"
    # resolv_domain: "foo.org" # consul domain?
    # resolv_search:
    #   - "foo.bar"
    #   - "foobar.com"
    resolv_options:
      - "timeout:2"
      - "rotate"

    # storage_base:       update_cache_only: yes

  environment:
    http_proxy: "{{ lookup('env', 'http_proxy') }}"
    https_proxy: "{{ lookup('env', 'https_proxy') }}"
    no_proxy: "{{ lookup('env', 'no_proxy') }}"

  pre_tasks:

    - name: Run asserts
      import_role:
        name: configure-host
        tasks_from: run-asserts
      tags:
        - asserts

    # does this need to be here?
    - name: Create compute_node_list
      set_fact:
        compute_node_list: "{{ groups['compute_nodes'] | map('extract', hostvars, 'ansible_ssh_host') | list }}"
      when: groups['compute_nodes'] is defined

    - debug:
        msg: "IP address {{ compute_node_public_ip }}"

    - debug:
        msg: "Running tasks on {{ ansible_host }}_{{ ansible_hostname }} at {{ ansible_default_ipv4.interface }}:{{ ansible_default_ipv4.address }} as user {{ ansible_user_id }}"

    - debug:
        var: resolv_nameservers
  
  tasks:

    - name: Update host packages
      import_role:
        name: configure-host
        tasks_from: run-package-update
      tags:
        - base
        - update

    - name: Configure host
      import_role:
        name: configure-host
      tags:
        - base
        - dependencies


# Run role to install and configure Hashicorp Consul on hosts specified as consul_instances
- hosts: consul_instances

  vars:
    # consul_install_dependencies: false
#    consul_datacenter: hcnp
#    consul_domain: 'consul'
#    consul_acl_datacenter: "consul"
#    consul_recursors: ['8.8.8.8', '8.8.4.4']
    consul_ui: true
    consul_dnsmasq_enable: yes
    consul_install_remotely: true
    consul_client_address: "0.0.0.0"
    consul_acl_master_token_display: yes
    # Consul bug 6346 to do with ui-content-path in config - leave in, harmless for now but will work when it is fixed
    consul_custom_config:
      ui-content-path: '/consul-ui/'

  pre_tasks:

    - name: "Assert consul_iface interface exists when defined"
      assert:
        that:
            - consul_iface in ansible_interfaces
        fail_msg: "{{ consul_iface}} is not detected on {{ ansible_host }}. Ensure interface is correctly defined for environment"
        success_msg: "consul_iface set to {{ consul_iface }}"
      when: consul_iface is defined

  tasks:

    - name: Run consul role
      become: yes
      import_role:
        name: brianshumate.consul
      tags:
        - consul


# Run role to install and configure Hashicorp Vault on hosts specified as vault_instances
- hosts: vault_instances

  vars:
      vault_datacenter: "hcnp"
      vault_domain: "hcnp"
      vault_ui: yes
      vault_cluster_disable: false
      vault_backend: consul

  tasks:

    - name: Run vault role
      become: true
      become_user: root
      import_role:
        name: vault
      tags:
        - vault


# Run role to install and configure Docker on hosts specified as docker_instances
- hosts: docker_instances

  vars:
    # architecture map idea taken from https://github.com/brianshumate/ansible-consul/blob/master/defaults/main.yml
    docker_apt_arch_map:
      # this first entry seems redundant
      # (but it's required for reasons)
      amd64: amd64
      x86_64: amd64
      armv6l: armhf
      armv7l: armhf
      aarch64: arm64
      64-bit: amd64
    docker_apt_arch: "{{ docker_apt_arch_map[ansible_architecture] }}"
    docker_install_compose: no
    docker_users: [
      "{{ ansible_user_id }}"
    ]

  post_tasks:

    - name: Configure Docker
      import_role:
        name: configure-docker
      tags:
        - docker
        - configuration

  tasks:

    - name: Install Docker
      become: yes
      import_role:
        name: geerlingguy.docker
      tags:
        - installation
        - docker


# Run role to install and configure Hashicorp Nomad on hosts specified as nomad_instances
- hosts: nomad_instances

  vars:
    nomad_datacenter: "hcnp"
    nomad_domain: "hcnp"
    nomad_bind_address: "0.0.0.0"
    # CONSTANTS
    # Bootstrap expect must be set when using Consul, this is the initial count of servers to wait for before electing a leader
    nomad_bootstrap_expect: 1
    nomad_use_consul: yes
    nomad_consul_address: http://127.0.0.1:8500
    nomad_vault_enabled: yes
    # Vault address is set dynamically
    nomad_vault_address: "http://{{ hostvars[inventory_hostname]['ansible_' + nomad_iface]['ipv4']['address'] }}:8200"
    nomad_vault_create_from_role: "nomad-cluster"


  pre_tasks:

    - name: "Assert nomad_iface interface exists when defined"
      assert:
        that:
            - nomad_iface in ansible_interfaces
        fail_msg: "{{ nomad_iface}} is not detected on {{ ansible_host }}. Ensure interface is correctly defined for environment"
        success_msg: "nomad_iface set to {{ nomad_iface }}"
      when: nomad_iface is defined

  tasks:

    - name: "Install and configure Nomad"
      become: true
      import_role:
        name: brianshumate.nomad
      tags:
        - nomad


# Run role to install and configure Containous Traefik on hosts specified as gateway_instances
- hosts: gateway_instances

  vars:
    # VARIABLES TO EDIT
    traefik_consul_master: "http://{{ consul_host }}"
    traefik_host_os: linux
    traefik_version: "{{ lookup('env','TRAEFIK_VERSION') | default('v1.7.14', true) }}"

    traefik_address: "{{ hostvars[inventory_hostname]['ansible_' + traefik_iface]['ipv4']['address'] }}"
    # architecture map idea taken from https://github.com/brianshumate/ansible-consul/blob/master/defaults/main.yml
    traefik_architecture_map:
      # this first entry seems redundant
      # (but it's required for reasons)
      amd64: amd64
      x86_64: amd64
      armv6l: arm
      armv7l: arm
      aarch64: arm64
      32-bit: "386"
      64-bit: amd64
    traefik_architecture: "{{ traefik_architecture_map[ansible_architecture] }}"
    # For releases see https://github.com/containous/traefik/releases
    traefik_binary_url: "https://github.com/containous/traefik/releases/download/{{ traefik_version }}/traefik_{{ traefik_host_os }}-{{ traefik_architecture }}"
    traefik_template: "{{ playbook_dir }}/templates/traefik.toml"

  pre_tasks:

    - name: Pre-install message
      debug:
        msg: "Installing Traefik {{ traefik_version }} for achitecture {{ traefik_architecture }} on host {{ ansible_host }}"
  
  tasks:

    - name: Run Traefik role
      become: true
      become_user: root
      import_role:
        name: traefik
      tags:
        - traefik

# Run role to install and configure ISC Bind as an authoritative DNS on hosts specified as dns_nodes
- hosts: dns_instances

  # Todo: Move vars to defaults in the DNS role, ip addresses should reside in the inventory perhaps?
  vars:
    isc_bind_acls:
      - name: acl1
        match_list:
          - 172.16.1.0/24
    isc_bind_forwarders:
      - name: google1
        ip: 8.8.8.8
      - name: google2
        ip: 8.8.4.4
    isc_bind_master_server:
      ip: 172.16.1.254
    isc_bind_domain:
      name: testdomain
      networks:
        - ipv4: 172.16
    isc_bind_ipv4: true
    isc_bind_ipv6: false

    packages: [
      resolvconf
    ]

  pre_tasks:

    - name: Pre-install message
      debug:
        msg: "Installing ISC Bind on host {{ ansible_host }}"

  tasks:

    - name: Install dependencies
      import_role:
        name: configure-host
        tasks_from: install-dependencies
      tags:
        - base
        - dependencies

    - name: "Install and configure authoritative DNS"
      become: true
      become_user: root
      import_role:
        name: dns
        tasks_from: install-bind-dns
      tags:
        - dns
        - configure-dns
